{
    "version": "2.6.3",
    "description": "SDL_image is an image loading library that is used with the SDL library, and almost as portable. It allows a programmer to use multiple image formats without having to code all the loading and conversion algorithms themselves.",
    "homepage": "https://github.com/libsdl-org/SDL_image",
    "license": "Zlib",
    "url": [
        "https://github.com/libsdl-org/SDL_image/releases/download/release-2.6.3/SDL2_image-devel-2.6.3-VC.zip",
        "https://github.com/libsdl-org/SDL_image/releases/download/release-2.6.3/SDL2_image-2.6.3.zip"
    ],
    "hash": [
        "5e54fa63d36358c2a310cc8ec1f5fda524c3011b1f7af1ebeadc58fef0c55ed9",
        "b448a8ca5b7927d9bd1577d393f4d6c59581f87ee525652a27e699941db37b7c"
    ],
    "installer": {
        "script": [
            "# SDL2_image is library containing a header file and a collection of dlls.",
            "# 'Installing' SDL2_image implies the following steps:",
            "#",
            "#",
            "#-------------------------------------------------------------------#",
            "# 1) Re-organize files into a standard scoop structure.",
            "#-------------------------------------------------------------------#",
            "# 1.1 Create helper variables",
            "$src_dir = \"$dir\\SDL2_image-$version\\\"",
            "#",
            "# 1.2 Create directories to store the library",
            "mkdir -f \"$dir\\lib\\pkgconfig\" > $null",
            "mkdir -f \"$dir\\include\\SDL2_image\" > $null",
            "#",
            "# 1.3 make arch consistent with scoop naming",
            "mv \"$src_dir\\lib\\x86\" \"$src_dir\\lib\\32bit\"",
            "mv \"$src_dir\\lib\\x64\" \"$src_dir\\lib\\64bit\"",
            "#",
            "# 1.4 Only keep the relevent architecture",
            "mv \"$src_dir\\lib\\$architecture\\*\" \"$dir\\lib\"",
            "#",
            "# 1.5 Move the header file",
            "mv \"$src_dir\\include\\*.h\"  \"$dir\\include\\SDL2_image\"",
            "write-host \"Intalling the $app ($architecture) library to $dir.\"",
            "#",
            "#",
            "#-------------------------------------------------------------------#",
            "# 2) Configure pck-config file with the library data.",
            "#-------------------------------------------------------------------#",
            "# 2.1 Create helper variables.",
            "$pc_in = \"$src_dir\\SDL2_image.pc.in\"",
            "$pc_out = \"$dir\\lib\\pkgconfig\\SDL2_image.pc\"",
            "$cm_dir = if (get_config NO_JUNCTIONS) { $dir } else { \"$(appdir $app $global)\\current\" }",
            "$pc_dir = \"$cm_dir\\lib\\pkgconfig\"",
            "#",
            "# 2.2 Configure the pck-config file.",
            "Set-Content $pc_out ((gc $pc_in) `",
            "    -replace \"@prefix@\",\"\" `",
            "    -replace \"@exec_prefix@\",\"`${prefix}\" `",
            "    -replace \"@libdir@\",\"`${exec_prefix}/lib\" `",
            "    -replace \"@includedir@\",\"`${prefix}/include\" `",
            "    -replace \"@PACKAGE@\",\"SDL2_image\" `",
            "    -replace \"@VERSION@\",\"$version\" `",
            "    -replace \"@SDL_VERSION@\",\"2.0.0\" `",
            ")",
            "#",
            "# 2.3 Make the library discoverable by adding the path to the Env variables.",
            "# 2.3.1 Do it for the future sessions",
            "# 2.3.1.1 For pck-config user",
            "$null, $currpath = strip_path (env 'PKG_CONFIG_PATH' $global) $pc_dir",
            "write-host \"Adding $app to PKG_CONFIG_PATH.\"",
            "env 'PKG_CONFIG_PATH' $global \"$pc_dir;$currpath\"",
            "# 2.3.1.2 For cmake user",
            "$null, $currpath = strip_path (env 'CMAKE_PREFIX_PATH' $global) $cm_dir",
            "write-host \"Adding $app to CMAKE_PREFIX_PATH.\"",
            "env 'CMAKE_PREFIX_PATH' $global \"$cm_dir;$currpath\"",
            "# 2.3.2 Do it for the this sessions",
            "# 2.3.2.1 For pck-config user",
            "$null, $env:PKG_CONFIG_PATH = strip_path $env:PKG_CONFIG_PATH $pc_dir",
            "$env:PKG_CONFIG_PATH = \"$pc_dir;$env:PKG_CONFIG_PATH\"",
            "# 2.3.2.2 For cmake user",
            "$null, $env:CMAKE_PREFIX_PATH = strip_path $env:CMAKE_PREFIX_PATH $cm_dir",
            "$env:CMAKE_PREFIX_PATH = \"$cm_dir;$env:CMAKE_PREFIX_PATH\"",
            "#",
            "#",
            "#-------------------------------------------------------------------#",
            "# 3) Final cleanup",
            "#-------------------------------------------------------------------#",
            "# 3.1 Remove the original source folder",
            "rm -r \"$src_dir\"",
            ""
        ]
    },
    "uninstaller": {
        "script": [
            "#-------------------------------------------------------------------#",
            "# 1) Remove library link in the env variables",
            "#-------------------------------------------------------------------#",
            "# 1.1 Create helper variables.",
            "$cm_dir = if (get_config NO_JUNCTIONS) { $dir } else { \"$(appdir $app $global)\\current\" }",
            "$pc_dir = \"$cm_dir\\lib\\pkgconfig\"",
            "#",
            "# 1.2 Delete env variables for future sessions",
            "$was_in_path, $newpath = strip_path (env 'PKG_CONFIG_PATH' $global) $pc_dir",
            "if($was_in_path) {",
            "    write-host \"Removing $(friendly_path $pc_dir) from your path.\"",
            "    env 'PKG_CONFIG_PATH' $global $newpath",
            "}",
            "$was_in_path, $newpath = strip_path (env 'CMAKE_PREFIX_PATH' $global) $cm_dir",
            "if($was_in_path) {",
            "    write-host \"Removing $(friendly_path $cm_dir) from your path.\"",
            "    env 'CMAKE_PREFIX_PATH' $global $newpath",
            "}",
            "#",
            "# 1.2 Delete env variables for this session",
            "$was_in_path, $newpath = strip_path $env:PKG_CONFIG_PATH $pc_dir",
            "if($was_in_path) { $env:PKG_CONFIG_PATH = $newpath }",
            "$was_in_path, $newpath = strip_path $env:CMAKE_PREFIX_PATH $cm_dir",
            "if($was_in_path) { $env:CMAKE_PREFIX_PATH = $newpath }"
        ]
    },
    "checkver": {
        "url": "https://github.com/libsdl-org/SDL_image/releases",
        "regex": "release-([\\d.]+)"
    },
    "autoupdate": {
        "url": [
            "https://github.com/libsdl-org/SDL_image/releases/download/release-$version/SDL2_image-devel-$version-VC.zip",
            "https://github.com/libsdl-org/SDL_image/releases/download/release-$version/SDL2_image-$version.zip"
        ]
    }
}
